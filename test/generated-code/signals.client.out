import 'dart:io';
import 'package:dbus/dbus.dart';

/// Signal data for com.example.Test.Event1.
class ComExampleTestEvent1 extends DBusSignal {
  String get value => values[0].asString();

  ComExampleTestEvent1(DBusSignal signal) : super(sender: signal.sender, path: signal.path, interface: signal.interface, name: signal.name, values: signal.values);
}

/// Signal data for com.example.Test.Event2.
class ComExampleTestEvent2 extends DBusSignal {
  int get value => values[0].asInt32();

  ComExampleTestEvent2(DBusSignal signal) : super(sender: signal.sender, path: signal.path, interface: signal.interface, name: signal.name, values: signal.values);
}

class ComExampleTest extends DBusRemoteObject {
  /// Stream of com.example.Test.Event1 signals.
  late final Stream<ComExampleTestEvent1> event1;

  /// Stream of com.example.Test.Event2 signals.
  late final Stream<ComExampleTestEvent2> event2;

  ComExampleTest(DBusClient client, String destination, DBusObjectPath path) : super(client, name: destination, path: path) {
    event1 = DBusRemoteObjectSignalStream(object: this, interface: 'com.example.Test', name: 'Event1', signature: DBusSignature('s')).asBroadcastStream().map((signal) => ComExampleTestEvent1(signal));

    event2 = DBusRemoteObjectSignalStream(object: this, interface: 'com.example.Test', name: 'Event2', signature: DBusSignature('i')).asBroadcastStream().map((signal) => ComExampleTestEvent2(signal));
  }
}
