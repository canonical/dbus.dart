import 'dart:io';
import 'package:dbus/dbus.dart';

class ComExampleTest extends DBusObject {
  /// Creates a new object to expose on [path].
  ComExampleTest({DBusObjectPath path = const DBusObjectPath.unchecked('/')}) : super(path);

  /// Implementation of com.example.Test.Hello()
  Future<DBusMethodResponse> doHello() async {
    return DBusMethodErrorResponse.failed('com.example.Test.Hello() not implemented');
  }

  @override
  List<DBusIntrospectInterface> introspect() {
    return [DBusIntrospectInterface('com.example.Test', methods: [DBusIntrospectMethod('Hello', args: [DBusIntrospectArgument(DBusSignature('y'), DBusArgumentDirection.out, name: 'byte_value'), DBusIntrospectArgument(DBusSignature('b'), DBusArgumentDirection.out, name: 'boolean_value'), DBusIntrospectArgument(DBusSignature('n'), DBusArgumentDirection.out, name: 'int16_value'), DBusIntrospectArgument(DBusSignature('q'), DBusArgumentDirection.out, name: 'uint16_value'), DBusIntrospectArgument(DBusSignature('i'), DBusArgumentDirection.out, name: 'int32_value'), DBusIntrospectArgument(DBusSignature('u'), DBusArgumentDirection.out, name: 'uint32_value'), DBusIntrospectArgument(DBusSignature('x'), DBusArgumentDirection.out, name: 'int64_value'), DBusIntrospectArgument(DBusSignature('t'), DBusArgumentDirection.out, name: 'uint64_value'), DBusIntrospectArgument(DBusSignature('d'), DBusArgumentDirection.out, name: 'double_value'), DBusIntrospectArgument(DBusSignature('s'), DBusArgumentDirection.out, name: 'string_value'), DBusIntrospectArgument(DBusSignature('o'), DBusArgumentDirection.out, name: 'object_path_value'), DBusIntrospectArgument(DBusSignature('g'), DBusArgumentDirection.out, name: 'signature_value'), DBusIntrospectArgument(DBusSignature('v'), DBusArgumentDirection.out, name: 'variant_value'), DBusIntrospectArgument(DBusSignature('h'), DBusArgumentDirection.out, name: 'unix_fd_value'), DBusIntrospectArgument(DBusSignature('(si)'), DBusArgumentDirection.out, name: 'struct_value'), DBusIntrospectArgument(DBusSignature('ay'), DBusArgumentDirection.out, name: 'array_value_y'), DBusIntrospectArgument(DBusSignature('ab'), DBusArgumentDirection.out, name: 'array_value_b'), DBusIntrospectArgument(DBusSignature('an'), DBusArgumentDirection.out, name: 'array_value_n'), DBusIntrospectArgument(DBusSignature('aq'), DBusArgumentDirection.out, name: 'array_value_q'), DBusIntrospectArgument(DBusSignature('ai'), DBusArgumentDirection.out, name: 'array_value_u'), DBusIntrospectArgument(DBusSignature('au'), DBusArgumentDirection.out, name: 'array_value_n'), DBusIntrospectArgument(DBusSignature('ax'), DBusArgumentDirection.out, name: 'array_value_x'), DBusIntrospectArgument(DBusSignature('at'), DBusArgumentDirection.out, name: 'array_value_t'), DBusIntrospectArgument(DBusSignature('ad'), DBusArgumentDirection.out, name: 'array_value_d'), DBusIntrospectArgument(DBusSignature('as'), DBusArgumentDirection.out, name: 'array_value_s'), DBusIntrospectArgument(DBusSignature('ao'), DBusArgumentDirection.out, name: 'array_value_o'), DBusIntrospectArgument(DBusSignature('ag'), DBusArgumentDirection.out, name: 'array_value_g'), DBusIntrospectArgument(DBusSignature('av'), DBusArgumentDirection.out, name: 'array_value_v'), DBusIntrospectArgument(DBusSignature('ah'), DBusArgumentDirection.out, name: 'array_value_h'), DBusIntrospectArgument(DBusSignature('a(si)'), DBusArgumentDirection.out, name: 'array_value_struct'), DBusIntrospectArgument(DBusSignature('aas'), DBusArgumentDirection.out, name: 'array_value_array'), DBusIntrospectArgument(DBusSignature('a{sv}'), DBusArgumentDirection.out, name: 'dict_value_sv'), DBusIntrospectArgument(DBusSignature('a{us}'), DBusArgumentDirection.out, name: 'dict_value_us'), DBusIntrospectArgument(DBusSignature('a{sa{sv}}'), DBusArgumentDirection.out, name: 'dict_value_dict')])])];
  }

  @override
  Future<DBusMethodResponse> handleMethodCall(DBusMethodCall methodCall) async {
    if (methodCall.interface == 'com.example.Test') {
      if (methodCall.name == 'Hello') {
        if (methodCall.values.isNotEmpty) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return doHello();
      } else {
        return DBusMethodErrorResponse.unknownMethod();
      }
    } else {
      return DBusMethodErrorResponse.unknownInterface();
    }
  }

  @override
  Future<DBusMethodResponse> getProperty(String interface, String name) async {
    if (interface == 'com.example.Test') {
      return DBusMethodErrorResponse.unknownProperty();
    } else {
      return DBusMethodErrorResponse.unknownProperty();
    }
  }

  @override
  Future<DBusMethodResponse> setProperty(String interface, String name, DBusValue value) async {
    if (interface == 'com.example.Test') {
      return DBusMethodErrorResponse.unknownProperty();
    } else {
      return DBusMethodErrorResponse.unknownProperty();
    }
  }
}
