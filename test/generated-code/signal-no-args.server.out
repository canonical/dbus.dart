import 'dart:io';
import 'package:dbus/dbus.dart';

class ComExampleTest extends DBusObject {
  /// Creates a new object to expose on [path].
  ComExampleTest({DBusObjectPath path = const DBusObjectPath.unchecked('/')}) : super(path);

  /// Emits signal com.example.Test.Event
  Future<void> emitEvent() async {
     await emitSignal('com.example.Test', 'Event', []);
  }

  @override
  List<DBusIntrospectInterface> introspect() {
    return [DBusIntrospectInterface('com.example.Test', signals: [DBusIntrospectSignal('Event')])];
  }

  @override
  Future<DBusMethodResponse> handleMethodCall(DBusMethodCall methodCall) async {
    if (methodCall.interface == 'com.example.Test') {
      return DBusMethodErrorResponse.unknownMethod();
    } else {
      return DBusMethodErrorResponse.unknownInterface();
    }
  }

  @override
  Future<DBusMethodResponse> getProperty(String interface, String name) async {
    if (interface == 'com.example.Test') {
      return DBusMethodErrorResponse.unknownProperty();
    } else {
      return DBusMethodErrorResponse.unknownProperty();
    }
  }

  @override
  Future<DBusMethodResponse> setProperty(String interface, String name, DBusValue value) async {
    if (interface == 'com.example.Test') {
      return DBusMethodErrorResponse.unknownProperty();
    } else {
      return DBusMethodErrorResponse.unknownProperty();
    }
  }
}
