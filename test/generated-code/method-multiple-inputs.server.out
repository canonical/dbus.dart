import 'package:dbus/dbus.dart';

class ComExampleTest extends DBusObject {
  /// Creates a new object to expose on [path].
  ComExampleTest({DBusObjectPath path = const DBusObjectPath.unchecked('/')}) : super(path);

  /// Implementation of com.example.Test.Hello()
  Future<DBusMethodResponse> doHello(int byte_value, bool boolean_value, int int16_value, int uint16_value, int int32_value, int uint32_value, int int64_value, int uint64_value, double double_value, String string_value, String object_path_value, DBusSignature signature_value, DBusValue variant_value, DBusStruct struct_value, List<int> array_value_y, List<bool> array_value_b, List<int> array_value_n, List<int> array_value_q, List<int> array_value_u, List<int> array_value_n, List<int> array_value_x, List<int> array_value_t, List<double> array_value_d, List<String> array_value_s, List<String> array_value_o, List<DBusSignature> array_value_g, List<DBusValue> array_value_v, List<DBusStruct> array_value_struct, List<List<String>> array_value_array, Map<String, DBusValue> dict_value_sv, Map<int, String> dict_value_us, Map<String, Map<String, DBusValue>> dict_value_dict) async {
    return DBusMethodErrorResponse.failed('com.example.Test.Hello() not implemented');
  }

  @override
  List<DBusIntrospectInterface> introspect() {
    return [DBusIntrospectInterface('com.example.Test', methods: [DBusIntrospectMethod('Hello', args: [DBusIntrospectArgument(DBusSignature('y'), DBusArgumentDirection.in_, name: 'byte_value'), DBusIntrospectArgument(DBusSignature('b'), DBusArgumentDirection.in_, name: 'boolean_value'), DBusIntrospectArgument(DBusSignature('n'), DBusArgumentDirection.in_, name: 'int16_value'), DBusIntrospectArgument(DBusSignature('q'), DBusArgumentDirection.in_, name: 'uint16_value'), DBusIntrospectArgument(DBusSignature('i'), DBusArgumentDirection.in_, name: 'int32_value'), DBusIntrospectArgument(DBusSignature('u'), DBusArgumentDirection.in_, name: 'uint32_value'), DBusIntrospectArgument(DBusSignature('x'), DBusArgumentDirection.in_, name: 'int64_value'), DBusIntrospectArgument(DBusSignature('t'), DBusArgumentDirection.in_, name: 'uint64_value'), DBusIntrospectArgument(DBusSignature('d'), DBusArgumentDirection.in_, name: 'double_value'), DBusIntrospectArgument(DBusSignature('s'), DBusArgumentDirection.in_, name: 'string_value'), DBusIntrospectArgument(DBusSignature('o'), DBusArgumentDirection.in_, name: 'object_path_value'), DBusIntrospectArgument(DBusSignature('g'), DBusArgumentDirection.in_, name: 'signature_value'), DBusIntrospectArgument(DBusSignature('v'), DBusArgumentDirection.in_, name: 'variant_value'), DBusIntrospectArgument(DBusSignature('(si)'), DBusArgumentDirection.in_, name: 'struct_value'), DBusIntrospectArgument(DBusSignature('ay'), DBusArgumentDirection.in_, name: 'array_value_y'), DBusIntrospectArgument(DBusSignature('ab'), DBusArgumentDirection.in_, name: 'array_value_b'), DBusIntrospectArgument(DBusSignature('an'), DBusArgumentDirection.in_, name: 'array_value_n'), DBusIntrospectArgument(DBusSignature('aq'), DBusArgumentDirection.in_, name: 'array_value_q'), DBusIntrospectArgument(DBusSignature('ai'), DBusArgumentDirection.in_, name: 'array_value_u'), DBusIntrospectArgument(DBusSignature('au'), DBusArgumentDirection.in_, name: 'array_value_n'), DBusIntrospectArgument(DBusSignature('ax'), DBusArgumentDirection.in_, name: 'array_value_x'), DBusIntrospectArgument(DBusSignature('at'), DBusArgumentDirection.in_, name: 'array_value_t'), DBusIntrospectArgument(DBusSignature('ad'), DBusArgumentDirection.in_, name: 'array_value_d'), DBusIntrospectArgument(DBusSignature('as'), DBusArgumentDirection.in_, name: 'array_value_s'), DBusIntrospectArgument(DBusSignature('ao'), DBusArgumentDirection.in_, name: 'array_value_o'), DBusIntrospectArgument(DBusSignature('ag'), DBusArgumentDirection.in_, name: 'array_value_g'), DBusIntrospectArgument(DBusSignature('av'), DBusArgumentDirection.in_, name: 'array_value_v'), DBusIntrospectArgument(DBusSignature('a(si)'), DBusArgumentDirection.in_, name: 'array_value_struct'), DBusIntrospectArgument(DBusSignature('aas'), DBusArgumentDirection.in_, name: 'array_value_array'), DBusIntrospectArgument(DBusSignature('a{sv}'), DBusArgumentDirection.in_, name: 'dict_value_sv'), DBusIntrospectArgument(DBusSignature('a{us}'), DBusArgumentDirection.in_, name: 'dict_value_us'), DBusIntrospectArgument(DBusSignature('a{sa{sv}}'), DBusArgumentDirection.in_, name: 'dict_value_dict')])])];
  }

  @override
  Future<DBusMethodResponse> handleMethodCall(DBusMethodCall methodCall) async {
    if (methodCall.interface == 'com.example.Test') {
      if (methodCall.name == 'Hello') {
        if (methodCall.signature != DBusSignature('ybnqiuxtdsogv(si)ayabanaqaiauaxatadasaoagava(si)aasa{sv}a{us}a{sa{sv}}')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return doHello((methodCall.values[0] as DBusByte).value, (methodCall.values[1] as DBusBoolean).value, (methodCall.values[2] as DBusInt16).value, (methodCall.values[3] as DBusUint16).value, (methodCall.values[4] as DBusInt32).value, (methodCall.values[5] as DBusUint32).value, (methodCall.values[6] as DBusInt64).value, (methodCall.values[7] as DBusUint64).value, (methodCall.values[8] as DBusDouble).value, (methodCall.values[9] as DBusString).value, (methodCall.values[10] as DBusObjectPath).value, methodCall.values[11] as DBusSignature, (methodCall.values[12] as DBusVariant).value, methodCall.values[13] as DBusStruct, methodCall.values[14].mapByte().toList(), (methodCall.values[15] as DBusArray).children.map((child) => (child as DBusBoolean).value).toList(), methodCall.values[16].mapInt16().toList(), methodCall.values[17].mapUint16().toList(), methodCall.values[18].mapInt32().toList(), methodCall.values[19].mapUint32().toList(), methodCall.values[20].mapInt64().toList(), methodCall.values[21].mapUint64().toList(), methodCall.values[22].mapDouble().toList(), methodCall.values[23].mapString().toList(), methodCall.values[24].objectPath().toList(), methodCall.values[25].signature().toList(), methodCall.values[26].mapVariant().toList(), (methodCall.values[27] as DBusArray).children.map((child) => child as DBusStruct).toList(), (methodCall.values[28] as DBusArray).children.map((child) => child.mapString().toList()).toList(), (methodCall.values[29] as DBusDict).mapStringVariant(), (methodCall.values[30] as DBusDict).children.map((key, value) => MapEntry((key as DBusUint32).value, (value as DBusString).value)), (methodCall.values[31] as DBusDict).children.map((key, value) => MapEntry((key as DBusString).value, (value as DBusDict).mapStringVariant())));
      } else {
        return DBusMethodErrorResponse.unknownMethod();
      }
    } else {
      return DBusMethodErrorResponse.unknownInterface();
    }
  }

  @override
  Future<DBusMethodResponse> getProperty(String interface, String name) async {
    if (interface == 'com.example.Test') {
      return DBusMethodErrorResponse.unknownProperty();
    } else {
      return DBusMethodErrorResponse.unknownProperty();
    }
  }

  @override
  Future<DBusMethodResponse> setProperty(String interface, String name, DBusValue value) async {
    if (interface == 'com.example.Test') {
      return DBusMethodErrorResponse.unknownProperty();
    } else {
      return DBusMethodErrorResponse.unknownProperty();
    }
  }
}
