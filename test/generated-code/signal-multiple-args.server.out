import 'package:dbus/dbus.dart';

class ComExampleTest extends DBusObject {
  /// Creates a new object to expose on [path].
  ComExampleTest({DBusObjectPath path = const DBusObjectPath.unchecked('/')}) : super(path);

  /// Emits signal com.example.Test.Event
  Future<void> emitEvent(int byte_value, bool boolean_value, int int16_value, int uint16_value, int int32_value, int uint32_value, int int64_value, int uint64_value, double double_value, String string_value, String object_path_value, DBusValue signature_value, DBusValue variant_value, DBusStruct struct_value, List<int> array_value_y, List<bool> array_value_b, List<int> array_value_n, List<int> array_value_q, List<int> array_value_u, List<int> array_value_n_, List<int> array_value_x, List<int> array_value_t, List<double> array_value_d, List<String> array_value_s, List<String> array_value_o, List<DBusValue> array_value_g, List<DBusValue> array_value_v, List<DBusStruct> array_value_struct, List<List<String>> array_value_array, Map<String, DBusValue> dict_value_sv, Map<int, String> dict_value_us, Map<String, Map<String, DBusValue>> dict_value_dict) async {
     await emitSignal('com.example.Test', 'Event', [DBusByte(byte_value), DBusBoolean(boolean_value), DBusInt16(int16_value), DBusUint16(uint16_value), DBusInt32(int32_value), DBusUint32(uint32_value), DBusInt64(int64_value), DBusUint64(uint64_value), DBusDouble(double_value), DBusString(string_value), DBusObjectPath(object_path_value), signature_value, DBusVariant(variant_value), struct_value, DBusArray.byte(array_value_y), DBusArray(DBusSignature('b'), array_value_b.map((child) => DBusBoolean(child))), DBusArray.int16(array_value_n), DBusArray.uint16(array_value_q), DBusArray.int32(array_value_u), DBusArray.uint32(array_value_n_), DBusArray.int64(array_value_x), DBusArray.uint64(array_value_t), DBusArray.double(array_value_d), DBusArray.string(array_value_s), DBusArray.objectPath(array_value_o), DBusArray(DBusSignature('g'), array_value_g.map((child) => child)), DBusArray.variant(array_value_v), DBusArray(DBusSignature('(si)'), array_value_struct.map((child) => child)), DBusArray(DBusSignature('as'), array_value_array.map((child) => DBusArray.string(child))), DBusDict.stringVariant(dict_value_sv), DBusDict(DBusSignature('u'), DBusSignature('s'), dict_value_us.map((key, value) => MapEntry(DBusUint32(key), DBusString(value)))), DBusDict(DBusSignature('s'), DBusSignature('a{sv}'), dict_value_dict.map((key, value) => MapEntry(DBusString(key), DBusDict.stringVariant(value))))]);
  }

  @override
  List<DBusIntrospectInterface> introspect() {
    return [DBusIntrospectInterface('com.example.Test', signals: [DBusIntrospectSignal('Event', args: [DBusIntrospectArgument(DBusSignature('y'), DBusArgumentDirection.out, name: 'byte_value'), DBusIntrospectArgument(DBusSignature('b'), DBusArgumentDirection.out, name: 'boolean_value'), DBusIntrospectArgument(DBusSignature('n'), DBusArgumentDirection.out, name: 'int16_value'), DBusIntrospectArgument(DBusSignature('q'), DBusArgumentDirection.out, name: 'uint16_value'), DBusIntrospectArgument(DBusSignature('i'), DBusArgumentDirection.out, name: 'int32_value'), DBusIntrospectArgument(DBusSignature('u'), DBusArgumentDirection.out, name: 'uint32_value'), DBusIntrospectArgument(DBusSignature('x'), DBusArgumentDirection.out, name: 'int64_value'), DBusIntrospectArgument(DBusSignature('t'), DBusArgumentDirection.out, name: 'uint64_value'), DBusIntrospectArgument(DBusSignature('d'), DBusArgumentDirection.out, name: 'double_value'), DBusIntrospectArgument(DBusSignature('s'), DBusArgumentDirection.out, name: 'string_value'), DBusIntrospectArgument(DBusSignature('o'), DBusArgumentDirection.out, name: 'object_path_value'), DBusIntrospectArgument(DBusSignature('g'), DBusArgumentDirection.out, name: 'signature_value'), DBusIntrospectArgument(DBusSignature('v'), DBusArgumentDirection.out, name: 'variant_value'), DBusIntrospectArgument(DBusSignature('(si)'), DBusArgumentDirection.out, name: 'struct_value'), DBusIntrospectArgument(DBusSignature('ay'), DBusArgumentDirection.out, name: 'array_value_y'), DBusIntrospectArgument(DBusSignature('ab'), DBusArgumentDirection.out, name: 'array_value_b'), DBusIntrospectArgument(DBusSignature('an'), DBusArgumentDirection.out, name: 'array_value_n'), DBusIntrospectArgument(DBusSignature('aq'), DBusArgumentDirection.out, name: 'array_value_q'), DBusIntrospectArgument(DBusSignature('ai'), DBusArgumentDirection.out, name: 'array_value_u'), DBusIntrospectArgument(DBusSignature('au'), DBusArgumentDirection.out, name: 'array_value_n'), DBusIntrospectArgument(DBusSignature('ax'), DBusArgumentDirection.out, name: 'array_value_x'), DBusIntrospectArgument(DBusSignature('at'), DBusArgumentDirection.out, name: 'array_value_t'), DBusIntrospectArgument(DBusSignature('ad'), DBusArgumentDirection.out, name: 'array_value_d'), DBusIntrospectArgument(DBusSignature('as'), DBusArgumentDirection.out, name: 'array_value_s'), DBusIntrospectArgument(DBusSignature('ao'), DBusArgumentDirection.out, name: 'array_value_o'), DBusIntrospectArgument(DBusSignature('ag'), DBusArgumentDirection.out, name: 'array_value_g'), DBusIntrospectArgument(DBusSignature('av'), DBusArgumentDirection.out, name: 'array_value_v'), DBusIntrospectArgument(DBusSignature('a(si)'), DBusArgumentDirection.out, name: 'array_value_struct'), DBusIntrospectArgument(DBusSignature('aas'), DBusArgumentDirection.out, name: 'array_value_array'), DBusIntrospectArgument(DBusSignature('a{sv}'), DBusArgumentDirection.out, name: 'dict_value_sv'), DBusIntrospectArgument(DBusSignature('a{us}'), DBusArgumentDirection.out, name: 'dict_value_us'), DBusIntrospectArgument(DBusSignature('a{sa{sv}}'), DBusArgumentDirection.out, name: 'dict_value_dict')])])];
  }

  @override
  Future<DBusMethodResponse> handleMethodCall(DBusMethodCall methodCall) async {
    if (methodCall.interface == 'com.example.Test') {
      return DBusMethodErrorResponse.unknownMethod();
    } else {
      return DBusMethodErrorResponse.unknownInterface();
    }
  }

  @override
  Future<DBusMethodResponse> getProperty(String interface, String name) async {
    if (interface == 'com.example.Test') {
      return DBusMethodErrorResponse.unknownProperty();
    } else {
      return DBusMethodErrorResponse.unknownInterface();
    }
  }

  @override
  Future<DBusMethodResponse> setProperty(String interface, String name, DBusValue value) async {
    if (interface == 'com.example.Test') {
      return DBusMethodErrorResponse.unknownProperty();
    } else {
      return DBusMethodErrorResponse.unknownInterface();
    }
  }

  @override
  Future<DBusMethodResponse> getAllProperties(String interface) async {
    var properties = <DBusValue, DBusValue>{};
    return DBusMethodSuccessResponse([DBusDict.stringVariant(properties)]);
  }
}
