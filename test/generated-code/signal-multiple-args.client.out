import 'package:dbus/dbus.dart';

/// Signal data for com.example.Test.Event.
class ComExampleTestEvent extends DBusSignal {
  int get byte_value => (values[0] as DBusByte).value;
  bool get boolean_value => (values[1] as DBusBoolean).value;
  int get int16_value => (values[2] as DBusInt16).value;
  int get uint16_value => (values[3] as DBusUint16).value;
  int get int32_value => (values[4] as DBusInt32).value;
  int get uint32_value => (values[5] as DBusUint32).value;
  int get int64_value => (values[6] as DBusInt64).value;
  int get uint64_value => (values[7] as DBusUint64).value;
  double get double_value => (values[8] as DBusDouble).value;
  String get string_value => (values[9] as DBusString).value;
  String get object_path_value => (values[10] as DBusObjectPath).value;
  DBusSignature get signature_value => values[11] as DBusSignature;
  DBusValue get variant_value => (values[12] as DBusVariant).value;
  DBusStruct get struct_value => values[13] as DBusStruct;
  List<int> get array_value_y => (values[14] as DBusArray).mapByte().toList();
  List<bool> get array_value_b => (values[15] as DBusArray).children.map((child) => (child as DBusBoolean).value).toList();
  List<int> get array_value_n => (values[16] as DBusArray).mapInt16().toList();
  List<int> get array_value_q => (values[17] as DBusArray).mapUint16().toList();
  List<int> get array_value_u => (values[18] as DBusArray).mapInt32().toList();
  List<int> get array_value_n_ => (values[19] as DBusArray).mapUint32().toList();
  List<int> get array_value_x => (values[20] as DBusArray).mapInt64().toList();
  List<int> get array_value_t => (values[21] as DBusArray).mapUint64().toList();
  List<double> get array_value_d => (values[22] as DBusArray).mapDouble().toList();
  List<String> get array_value_s => (values[23] as DBusArray).mapString().toList();
  List<String> get array_value_o => (values[24] as DBusArray).objectPath().toList();
  List<DBusSignature> get array_value_g => (values[25] as DBusArray).signature().toList();
  List<DBusValue> get array_value_v => (values[26] as DBusArray).mapVariant().toList();
  List<DBusStruct> get array_value_struct => (values[27] as DBusArray).children.map((child) => child as DBusStruct).toList();
  List<List<String>> get array_value_array => (values[28] as DBusArray).children.map((child) => (child as DBusArray).mapString().toList()).toList();
  Map<String, DBusValue> get dict_value_sv => (values[29] as DBusDict).mapStringVariant();
  Map<int, String> get dict_value_us => (values[30] as DBusDict).children.map((key, value) => MapEntry((key as DBusUint32).value, (value as DBusString).value));
  Map<String, Map<String, DBusValue>> get dict_value_dict => (values[31] as DBusDict).children.map((key, value) => MapEntry((key as DBusString).value, (value as DBusDict).mapStringVariant()));

  ComExampleTestEvent(DBusSignal signal) : super(sender: signal.sender, path: signal.path, interface: signal.interface, name: signal.name, values: signal.values);
}

class ComExampleTest extends DBusRemoteObject {
  /// Stream of com.example.Test.Event signals.
  late final Stream<ComExampleTestEvent> event;

  ComExampleTest(DBusClient client, String destination, DBusObjectPath path) : super(client, name: destination, path: path) {
    event = DBusRemoteObjectSignalStream(object: this, interface: 'com.example.Test', name: 'Event', signature: DBusSignature('ybnqiuxtdsogv(si)ayabanaqaiauaxatadasaoagava(si)aasa{sv}a{us}a{sa{sv}}')).asBroadcastStream().map((signal) => ComExampleTestEvent(signal));
  }
}
