import 'dart:io';
import 'package:dbus/dbus.dart';

class ComExampleTest extends DBusObject {
  /// Creates a new object to expose on [path].
  ComExampleTest({DBusObjectPath path = const DBusObjectPath.unchecked('/')}) : super(path);

  /// Implementation of com.example.Test.Hello1()
  Future<DBusMethodResponse> doHello1() async {
    return DBusMethodErrorResponse.failed('com.example.Test.Hello1() not implemented');
  }

  /// Implementation of com.example.Test.Hello2()
  Future<DBusMethodResponse> doHello2() async {
    return DBusMethodErrorResponse.failed('com.example.Test.Hello2() not implemented');
  }

  /// Implementation of com.example.Test.Hello3()
  Future<DBusMethodResponse> doHello3() async {
    return DBusMethodErrorResponse.failed('com.example.Test.Hello3() not implemented');
  }

  @override
  List<DBusIntrospectInterface> introspect() {
    return [DBusIntrospectInterface('com.example.Test', methods: [DBusIntrospectMethod('Hello1'), DBusIntrospectMethod('Hello2'), DBusIntrospectMethod('Hello3')])];
  }

  @override
  Future<DBusMethodResponse> handleMethodCall(DBusMethodCall methodCall) async {
    if (methodCall.interface == 'com.example.Test') {
      if (methodCall.name == 'Hello1') {
        if (methodCall.values.isNotEmpty) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return doHello1();
      } else if (methodCall.name == 'Hello2') {
        if (methodCall.values.isNotEmpty) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return doHello2();
      } else if (methodCall.name == 'Hello3') {
        if (methodCall.values.isNotEmpty) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return doHello3();
      } else {
        return DBusMethodErrorResponse.unknownMethod();
      }
    } else {
      return DBusMethodErrorResponse.unknownInterface();
    }
  }

  @override
  Future<DBusMethodResponse> getProperty(String interface, String name) async {
    if (interface == 'com.example.Test') {
      return DBusMethodErrorResponse.unknownProperty();
    } else {
      return DBusMethodErrorResponse.unknownProperty();
    }
  }

  @override
  Future<DBusMethodResponse> setProperty(String interface, String name, DBusValue value) async {
    if (interface == 'com.example.Test') {
      return DBusMethodErrorResponse.unknownProperty();
    } else {
      return DBusMethodErrorResponse.unknownProperty();
    }
  }
}
