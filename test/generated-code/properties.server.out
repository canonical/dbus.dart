import 'package:dbus/dbus.dart';

class ComExampleTest extends DBusObject {
  /// Creates a new object to expose on [path].
  ComExampleTest({DBusObjectPath path = const DBusObjectPath.unchecked('/')}) : super(path);

  /// Gets value of property com.example.Test.ByteProperty
  Future<DBusMethodResponse> getByteProperty() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.ByteProperty not implemented');
  }

  /// Sets property com.example.Test.ByteProperty
  Future<DBusMethodResponse> setByteProperty(int value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.ByteProperty not implemented');
  }

  /// Gets value of property com.example.Test.BooleanProperty
  Future<DBusMethodResponse> getBooleanProperty() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.BooleanProperty not implemented');
  }

  /// Sets property com.example.Test.BooleanProperty
  Future<DBusMethodResponse> setBooleanProperty(bool value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.BooleanProperty not implemented');
  }

  /// Gets value of property com.example.Test.Int16Property
  Future<DBusMethodResponse> getInt16Property() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.Int16Property not implemented');
  }

  /// Sets property com.example.Test.Int16Property
  Future<DBusMethodResponse> setInt16Property(int value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.Int16Property not implemented');
  }

  /// Gets value of property com.example.Test.Uint16Property
  Future<DBusMethodResponse> getUint16Property() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.Uint16Property not implemented');
  }

  /// Sets property com.example.Test.Uint16Property
  Future<DBusMethodResponse> setUint16Property(int value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.Uint16Property not implemented');
  }

  /// Gets value of property com.example.Test.Int32Property
  Future<DBusMethodResponse> getInt32Property() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.Int32Property not implemented');
  }

  /// Sets property com.example.Test.Int32Property
  Future<DBusMethodResponse> setInt32Property(int value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.Int32Property not implemented');
  }

  /// Gets value of property com.example.Test.Uint32Property
  Future<DBusMethodResponse> getUint32Property() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.Uint32Property not implemented');
  }

  /// Sets property com.example.Test.Uint32Property
  Future<DBusMethodResponse> setUint32Property(int value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.Uint32Property not implemented');
  }

  /// Gets value of property com.example.Test.Int64Property
  Future<DBusMethodResponse> getInt64Property() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.Int64Property not implemented');
  }

  /// Sets property com.example.Test.Int64Property
  Future<DBusMethodResponse> setInt64Property(int value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.Int64Property not implemented');
  }

  /// Gets value of property com.example.Test.Uint64Property
  Future<DBusMethodResponse> getUint64Property() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.Uint64Property not implemented');
  }

  /// Sets property com.example.Test.Uint64Property
  Future<DBusMethodResponse> setUint64Property(int value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.Uint64Property not implemented');
  }

  /// Gets value of property com.example.Test.DoubleProperty
  Future<DBusMethodResponse> getDoubleProperty() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.DoubleProperty not implemented');
  }

  /// Sets property com.example.Test.DoubleProperty
  Future<DBusMethodResponse> setDoubleProperty(double value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.DoubleProperty not implemented');
  }

  /// Gets value of property com.example.Test.StringProperty
  Future<DBusMethodResponse> getStringProperty() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.StringProperty not implemented');
  }

  /// Sets property com.example.Test.StringProperty
  Future<DBusMethodResponse> setStringProperty(String value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.StringProperty not implemented');
  }

  /// Gets value of property com.example.Test.ObjectPathProperty
  Future<DBusMethodResponse> getObjectPathProperty() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.ObjectPathProperty not implemented');
  }

  /// Sets property com.example.Test.ObjectPathProperty
  Future<DBusMethodResponse> setObjectPathProperty(String value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.ObjectPathProperty not implemented');
  }

  /// Gets value of property com.example.Test.SignatureProperty
  Future<DBusMethodResponse> getSignatureProperty() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.SignatureProperty not implemented');
  }

  /// Sets property com.example.Test.SignatureProperty
  Future<DBusMethodResponse> setSignatureProperty(DBusValue value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.SignatureProperty not implemented');
  }

  /// Gets value of property com.example.Test.VariantProperty
  Future<DBusMethodResponse> getVariantProperty() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.VariantProperty not implemented');
  }

  /// Sets property com.example.Test.VariantProperty
  Future<DBusMethodResponse> setVariantProperty(DBusValue value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.VariantProperty not implemented');
  }

  /// Gets value of property com.example.Test.StructProperty
  Future<DBusMethodResponse> getStructProperty() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.StructProperty not implemented');
  }

  /// Sets property com.example.Test.StructProperty
  Future<DBusMethodResponse> setStructProperty(DBusStruct value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.StructProperty not implemented');
  }

  /// Gets value of property com.example.Test.ArrayProperty
  Future<DBusMethodResponse> getArrayProperty() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.ArrayProperty not implemented');
  }

  /// Sets property com.example.Test.ArrayProperty
  Future<DBusMethodResponse> setArrayProperty(List<int> value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.ArrayProperty not implemented');
  }

  /// Gets value of property com.example.Test.DictProperty
  Future<DBusMethodResponse> getDictProperty() async {
    return DBusMethodErrorResponse.failed('Get com.example.Test.DictProperty not implemented');
  }

  /// Sets property com.example.Test.DictProperty
  Future<DBusMethodResponse> setDictProperty(Map<String, DBusValue> value) async {
    return DBusMethodErrorResponse.failed('Set com.example.Test.DictProperty not implemented');
  }

  @override
  List<DBusIntrospectInterface> introspect() {
    return [DBusIntrospectInterface('com.example.Test', properties: [DBusIntrospectProperty('ByteProperty', DBusSignature('y'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('BooleanProperty', DBusSignature('b'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('Int16Property', DBusSignature('n'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('Uint16Property', DBusSignature('q'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('Int32Property', DBusSignature('i'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('Uint32Property', DBusSignature('u'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('Int64Property', DBusSignature('x'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('Uint64Property', DBusSignature('t'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('DoubleProperty', DBusSignature('d'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('StringProperty', DBusSignature('s'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('ObjectPathProperty', DBusSignature('o'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('SignatureProperty', DBusSignature('g'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('VariantProperty', DBusSignature('v'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('StructProperty', DBusSignature('(si)'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('ArrayProperty', DBusSignature('ay'), access: DBusPropertyAccess.readwrite), DBusIntrospectProperty('DictProperty', DBusSignature('a{sv}'), access: DBusPropertyAccess.readwrite)])];
  }

  @override
  Future<DBusMethodResponse> handleMethodCall(DBusMethodCall methodCall) async {
    if (methodCall.interface == 'com.example.Test') {
      return DBusMethodErrorResponse.unknownMethod();
    } else {
      return DBusMethodErrorResponse.unknownInterface();
    }
  }

  @override
  Future<DBusMethodResponse> getProperty(String interface, String name) async {
    if (interface == 'com.example.Test') {
      if (name == 'ByteProperty') {
        return getByteProperty();
      } else if (name == 'BooleanProperty') {
        return getBooleanProperty();
      } else if (name == 'Int16Property') {
        return getInt16Property();
      } else if (name == 'Uint16Property') {
        return getUint16Property();
      } else if (name == 'Int32Property') {
        return getInt32Property();
      } else if (name == 'Uint32Property') {
        return getUint32Property();
      } else if (name == 'Int64Property') {
        return getInt64Property();
      } else if (name == 'Uint64Property') {
        return getUint64Property();
      } else if (name == 'DoubleProperty') {
        return getDoubleProperty();
      } else if (name == 'StringProperty') {
        return getStringProperty();
      } else if (name == 'ObjectPathProperty') {
        return getObjectPathProperty();
      } else if (name == 'SignatureProperty') {
        return getSignatureProperty();
      } else if (name == 'VariantProperty') {
        return getVariantProperty();
      } else if (name == 'StructProperty') {
        return getStructProperty();
      } else if (name == 'ArrayProperty') {
        return getArrayProperty();
      } else if (name == 'DictProperty') {
        return getDictProperty();
      } else {
        return DBusMethodErrorResponse.unknownProperty();
      }
    } else {
      return DBusMethodErrorResponse.unknownInterface();
    }
  }

  @override
  Future<DBusMethodResponse> setProperty(String interface, String name, DBusValue value) async {
    if (interface == 'com.example.Test') {
      if (name == 'ByteProperty') {
        if (value.signature != DBusSignature('y')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setByteProperty((value as DBusByte).value);
      } else if (name == 'BooleanProperty') {
        if (value.signature != DBusSignature('b')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setBooleanProperty((value as DBusBoolean).value);
      } else if (name == 'Int16Property') {
        if (value.signature != DBusSignature('n')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setInt16Property((value as DBusInt16).value);
      } else if (name == 'Uint16Property') {
        if (value.signature != DBusSignature('q')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setUint16Property((value as DBusUint16).value);
      } else if (name == 'Int32Property') {
        if (value.signature != DBusSignature('i')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setInt32Property((value as DBusInt32).value);
      } else if (name == 'Uint32Property') {
        if (value.signature != DBusSignature('u')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setUint32Property((value as DBusUint32).value);
      } else if (name == 'Int64Property') {
        if (value.signature != DBusSignature('x')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setInt64Property((value as DBusInt64).value);
      } else if (name == 'Uint64Property') {
        if (value.signature != DBusSignature('t')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setUint64Property((value as DBusUint64).value);
      } else if (name == 'DoubleProperty') {
        if (value.signature != DBusSignature('d')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setDoubleProperty((value as DBusDouble).value);
      } else if (name == 'StringProperty') {
        if (value.signature != DBusSignature('s')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setStringProperty((value as DBusString).value);
      } else if (name == 'ObjectPathProperty') {
        if (value.signature != DBusSignature('o')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setObjectPathProperty((value as DBusObjectPath).value);
      } else if (name == 'SignatureProperty') {
        if (value.signature != DBusSignature('g')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setSignatureProperty(value);
      } else if (name == 'VariantProperty') {
        if (value.signature != DBusSignature('v')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setVariantProperty((value as DBusVariant).value);
      } else if (name == 'StructProperty') {
        if (value.signature != DBusSignature('(si)')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setStructProperty(value as DBusStruct);
      } else if (name == 'ArrayProperty') {
        if (value.signature != DBusSignature('ay')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setArrayProperty((value as DBusArray).children.map((child) => (child as DBusByte).value).toList());
      } else if (name == 'DictProperty') {
        if (value.signature != DBusSignature('a{sv}')) {
          return DBusMethodErrorResponse.invalidArgs();
        }
        return setDictProperty((value as DBusDict).children.map((key, value) => MapEntry((key as DBusString).value, (value as DBusVariant).value)));
      } else {
        return DBusMethodErrorResponse.unknownProperty();
      }
    } else {
      return DBusMethodErrorResponse.unknownInterface();
    }
  }

  @override
  Future<DBusMethodResponse> getAllProperties(String interface) async {
    var properties = <DBusValue, DBusValue>{};
    if (interface == 'com.example.Test') {
      properties[DBusString('ByteProperty')] = (await getByteProperty()).returnValues[0];
      properties[DBusString('BooleanProperty')] = (await getBooleanProperty()).returnValues[0];
      properties[DBusString('Int16Property')] = (await getInt16Property()).returnValues[0];
      properties[DBusString('Uint16Property')] = (await getUint16Property()).returnValues[0];
      properties[DBusString('Int32Property')] = (await getInt32Property()).returnValues[0];
      properties[DBusString('Uint32Property')] = (await getUint32Property()).returnValues[0];
      properties[DBusString('Int64Property')] = (await getInt64Property()).returnValues[0];
      properties[DBusString('Uint64Property')] = (await getUint64Property()).returnValues[0];
      properties[DBusString('DoubleProperty')] = (await getDoubleProperty()).returnValues[0];
      properties[DBusString('StringProperty')] = (await getStringProperty()).returnValues[0];
      properties[DBusString('ObjectPathProperty')] = (await getObjectPathProperty()).returnValues[0];
      properties[DBusString('SignatureProperty')] = (await getSignatureProperty()).returnValues[0];
      properties[DBusString('VariantProperty')] = (await getVariantProperty()).returnValues[0];
      properties[DBusString('StructProperty')] = (await getStructProperty()).returnValues[0];
      properties[DBusString('ArrayProperty')] = (await getArrayProperty()).returnValues[0];
      properties[DBusString('DictProperty')] = (await getDictProperty()).returnValues[0];
    }
    return DBusMethodSuccessResponse([DBusDict.stringVariant(properties)]);
  }
}
